-- ============================================================================
-- 10x-cards Database Seed Data
-- Version: 002
-- Description: Test data for development and staging environments
-- Created: 2025-10-25
-- WARNING: DO NOT RUN THIS ON PRODUCTION!
-- ============================================================================

-- This file should only be used in development/staging environments
-- It provides sample data for testing the application

-- ============================================================================
-- IMPORTANT PREREQUISITES:
-- ============================================================================
-- Before running this seed data, you MUST create a test user first!
--
-- OPTION A: Create user through Supabase Auth (RECOMMENDED)
-- --------------------------------------------------------
-- 1. Go to: http://127.0.0.1:54321 (Supabase Studio)
-- 2. Navigate to: Authentication > Users
-- 3. Click "Add user" > "Create new user"
-- 4. Email: test@10xcards.dev
-- 5. Password: TestPassword123!
-- 6. Copy the generated UUID
-- 7. Replace all instances of '9496170f-8517-4bcc-bd0f-06cba32bde72' below with your UUID
--
-- OPTION B: Create user via SQL (requires service_role permissions)
-- ------------------------------------------------------------------
-- Run this in Supabase SQL Editor with service_role key:
--
-- INSERT INTO auth.users (
--     instance_id,
--     id,
--     aud,
--     role,
--     email,
--     encrypted_password,
--     email_confirmed_at,
--     raw_app_meta_data,
--     raw_user_meta_data,
--     created_at,
--     updated_at,
--     confirmation_token,
--     email_change,
--     email_change_token_new,
--     recovery_token
-- ) VALUES (
--     '9496170f-8517-4bcc-bd0f-06cba32bde72',
--     '9496170f-8517-4bcc-bd0f-06cba32bde72', -- CHANGE THIS UUID!
--     'authenticated',
--     'authenticated',
--     'test@10xcards.dev',
--     crypt('TestPassword123!', gen_salt('bf')),
--     NOW(),
--     '{"provider":"email","providers":["email"]}',
--     '{"display_name":"Test User"}',
--     NOW(),
--     NOW(),
--     '',
--     '',
--     '',
--     ''
-- ) ON CONFLICT (id) DO NOTHING;
--
-- ============================================================================

-- ============================================================================
-- 1. SAMPLE USER PROFILE
-- ============================================================================

-- Create profile for test user
-- IMPORTANT: Replace '9496170f-8517-4bcc-bd0f-06cba32bde72' with your test user UUID!
DO $$
DECLARE
    test_user_id UUID := '9496170f-8517-4bcc-bd0f-06cba32bde72'; -- CHANGE THIS!
BEGIN
    -- Check if user exists in auth.users
    IF NOT EXISTS (SELECT 1 FROM auth.users WHERE id = test_user_id) THEN
        RAISE NOTICE '';
        RAISE NOTICE '╔════════════════════════════════════════════════════════════════╗';
        RAISE NOTICE '║  ERROR: Test user does not exist in auth.users!                ║';
        RAISE NOTICE '║                                                                ║';
        RAISE NOTICE '║  Please create a test user first. See instructions at top     ║';
        RAISE NOTICE '║  of this file (002_seed_data.sql)                             ║';
        RAISE NOTICE '║                                                                ║';
        RAISE NOTICE '║  Current test_user_id: %                                      ║', test_user_id;
        RAISE NOTICE '╚════════════════════════════════════════════════════════════════╝';
        RAISE NOTICE '';
        RAISE EXCEPTION 'Test user % does not exist. Create user first!', test_user_id;
    END IF;
    
    -- Insert profile
    INSERT INTO profiles (
        user_id,
        display_name,
        total_cards_created,
        total_cards_generated_by_ai,
        daily_generation_count,
        last_generation_date,
        created_at,
        updated_at
    ) VALUES (
        test_user_id,
        'Test User (10xCards)',
        0, -- Will be updated by triggers
        0, -- Will be updated by triggers
        2,
        CURRENT_DATE,
        NOW(),
        NOW()
    ) ON CONFLICT (user_id) DO NOTHING;
    
    RAISE NOTICE '✓ Profile created successfully for user: %', test_user_id;
END $$;

-- ============================================================================
-- 2. SAMPLE GENERATION SESSIONS
-- ============================================================================

-- Sample successful generation session
INSERT INTO generation_sessions (
    id,
    user_id,
    input_text,
    generated_count,
    accepted_count,
    rejected_count,
    status,
    error_message,
    generation_time_ms,
    tokens_used,
    model_used,
    created_at
) VALUES (
    '10000000-0000-0000-0000-000000000001',
    '9496170f-8517-4bcc-bd0f-06cba32bde72', -- CHANGE THIS!
    'PostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. It uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads. PostgreSQL comes with many features aimed to help developers build applications, administrators to protect data integrity and build fault-tolerant environments, and help you manage your data no matter how big or small the dataset. In addition to being free and open source, PostgreSQL is highly extensible. For example, you can define your own data types, build out custom functions, even write code from different programming languages without recompiling your database! PostgreSQL has been proven to be highly scalable both in the sheer quantity of data it can manage and in the number of concurrent users it can accommodate. This is PostgreSQL,this is PostgreSQL, this is PostgreSQL',
    5,
    4,
    1,
    'success',
    NULL,
    2500,
    450,
    'anthropic/claude-3-5-sonnet',
    NOW() - INTERVAL '2 days'
);

-- Sample failed generation session
INSERT INTO generation_sessions (
    id,
    user_id,
    input_text,
    generated_count,
    accepted_count,
    rejected_count,
    status,
    error_message,
    generation_time_ms,
    tokens_used,
    model_used,
    created_at
) VALUES (
    '10000000-0000-0000-0000-000000000002',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    'React is a JavaScript library for building user interfaces. It is maintained by Meta and a community of individual developers and companies. React can be used as a base in the development of single-page, mobile, or server-rendered applications with frameworks like Next.js. However, React is only concerned with the user interface and rendering components to the DOM, so React applications often rely on libraries for routing and other client-side functionality. A key advantage of React is that it only re-renders the parts of the interface that have changed. This is done through a virtual DOM - a lightweight copy of the actual DOM. When state changes in a React component, React updates the virtual DOM and compares it with the previous version to determine what has changed. It then updates only those parts of the real DOM that need to be updated. This is React, this is React, this is React,  This is React, this is React, this is React,This is React, this is React, this is React, This is React, this is React, this is React,   ',
    0,
    0,
    0,
    'failed',
    'API timeout after 30 seconds',
    30000,
    NULL,
    'anthropic/claude-3-5-sonnet',
    NOW() - INTERVAL '1 day'
);

-- ============================================================================
-- 3. SAMPLE FLASHCARDS
-- ============================================================================

-- Sample AI-generated flashcards (linked to generation session)
INSERT INTO flashcards (
    id,
    user_id,
    generation_session_id,
    front,
    back,
    source,
    ease_factor,
    interval_days,
    repetitions,
    next_review_date,
    last_reviewed_at,
    created_at,
    updated_at
) VALUES
(
    '20000000-0000-0000-0000-000000000001',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    '10000000-0000-0000-0000-000000000001',
    'What is PostgreSQL?',
    'PostgreSQL is a powerful, open source object-relational database system with over 35 years of active development, known for reliability, feature robustness, and performance.',
    'ai_generated',
    2.5,
    0,
    0,
    NOW(),
    NULL,
    NOW() - INTERVAL '2 days',
    NOW() - INTERVAL '2 days'
),
(
    '20000000-0000-0000-0000-000000000002',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    '10000000-0000-0000-0000-000000000001',
    'What language does PostgreSQL use?',
    'PostgreSQL uses and extends the SQL language combined with many features that safely store and scale complicated data workloads.',
    'ai_generated',
    2.6,
    1,
    1,
    NOW() + INTERVAL '1 day',
    NOW() - INTERVAL '1 day',
    NOW() - INTERVAL '2 days',
    NOW() - INTERVAL '1 day'
),
(
    '20000000-0000-0000-0000-000000000003',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    '10000000-0000-0000-0000-000000000001',
    'Is PostgreSQL free and open source?',
    'Yes, PostgreSQL is free and open source. It is also highly extensible, allowing developers to define custom data types, functions, and write code from different programming languages.',
    'ai_generated',
    2.8,
    6,
    2,
    NOW() + INTERVAL '6 days',
    NOW() - INTERVAL '1 day',
    NOW() - INTERVAL '2 days',
    NOW() - INTERVAL '1 day'
),
(
    '20000000-0000-0000-0000-000000000004',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    '10000000-0000-0000-0000-000000000001',
    'What are the main benefits of PostgreSQL for developers?',
    'PostgreSQL helps developers build applications, administrators protect data integrity and build fault-tolerant environments, and manage data regardless of dataset size.',
    'ai_generated',
    2.5,
    0,
    0,
    NOW() - INTERVAL '2 hours',
    NULL,
    NOW() - INTERVAL '2 days',
    NOW() - INTERVAL '2 days'
);

-- Sample manually created flashcards (no generation session)
INSERT INTO flashcards (
    id,
    user_id,
    generation_session_id,
    front,
    back,
    source,
    ease_factor,
    interval_days,
    repetitions,
    next_review_date,
    last_reviewed_at,
    created_at,
    updated_at
) VALUES
(
    '20000000-0000-0000-0000-000000000005',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    NULL,
    'What is the capital of France?',
    'Paris',
    'manual',
    2.5,
    0,
    0,
    NOW(),
    NULL,
    NOW() - INTERVAL '5 days',
    NOW() - INTERVAL '5 days'
),
(
    '20000000-0000-0000-0000-000000000006',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    NULL,
    'What is 2 + 2?',
    '4',
    'manual',
    3.2,
    15,
    5,
    NOW() + INTERVAL '15 days',
    NOW() - INTERVAL '3 days',
    NOW() - INTERVAL '20 days',
    NOW() - INTERVAL '3 days'
),
(
    '20000000-0000-0000-0000-000000000007',
    '9496170f-8517-4bcc-bd0f-06cba32bde72',
    NULL,
    'What does HTML stand for?',
    'HyperText Markup Language',
    'manual',
    2.7,
    3,
    2,
    NOW() - INTERVAL '1 day',
    NOW() - INTERVAL '4 days',
    NOW() - INTERVAL '10 days',
    NOW() - INTERVAL '4 days'
);

-- ============================================================================
-- 4. VERIFICATION QUERIES
-- ============================================================================

-- Verify the seed data was inserted correctly:

DO $$
DECLARE
    test_user_id UUID := '9496170f-8517-4bcc-bd0f-06cba32bde72'; -- CHANGE THIS!
    profile_count INTEGER;
    flashcard_count INTEGER;
    session_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO profile_count FROM profiles WHERE user_id = test_user_id;
    SELECT COUNT(*) INTO flashcard_count FROM flashcards WHERE user_id = test_user_id;
    SELECT COUNT(*) INTO session_count FROM generation_sessions WHERE user_id = test_user_id;
    
    RAISE NOTICE '';
    RAISE NOTICE '╔════════════════════════════════════════════════════════════════╗';
    RAISE NOTICE '║  SEED DATA VERIFICATION                                        ║';
    RAISE NOTICE '╠════════════════════════════════════════════════════════════════╣';
    RAISE NOTICE '║  Test User ID: %                                               ║', test_user_id;
    RAISE NOTICE '║  Profiles:     %                                               ║', profile_count;
    RAISE NOTICE '║  Flashcards:   %                                               ║', flashcard_count;
    RAISE NOTICE '║  Sessions:     %                                               ║', session_count;
    RAISE NOTICE '╚════════════════════════════════════════════════════════════════╝';
    RAISE NOTICE '';
    
    IF profile_count = 0 THEN
        RAISE WARNING 'No profile found for test user!';
    END IF;
    
    IF flashcard_count = 0 THEN
        RAISE WARNING 'No flashcards found for test user!';
    END IF;
    
    IF session_count = 0 THEN
        RAISE WARNING 'No generation sessions found for test user!';
    END IF;
END $$;

-- To view detailed stats, run these queries in Supabase SQL Editor:
-- (Replace the UUID with your test user UUID)
--
-- SELECT * FROM get_user_stats('9496170f-8517-4bcc-bd0f-06cba32bde72');
-- SELECT * FROM get_cards_due_for_review('9496170f-8517-4bcc-bd0f-06cba32bde72', 10);

-- ============================================================================
-- END OF SEED DATA
-- ============================================================================

